name: Test & Release

on:
  workflow_dispatch:

  push:
    branches:
      - '**'

permissions:
  contents: read

jobs:
  test:
    name: Python ${{ matrix.python-version }} tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        run: |
          # Install UV using the official installation script
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Setup UV environment
        run: |
          # Create and activate virtual environment
          uv venv .venv
          source .venv/bin/activate
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          # Install project and test dependencies
          uv pip install -e ".[test,visualization]"
          uv pip install pytest pytest-mock pytest-github-actions-annotate-failures

      - name: Run tests
        id: tests
        run: |
          pytest -vvv

  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        run: |
          # Install UV
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Setup UV environment
        run: |
          # Create and activate virtual environment
          uv venv .venv
          source .venv/bin/activate
          echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
          echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH

      - name: Install Black
        run: |
          # Install specific version of Black using UV
          uv pip install black==23.3.0

      - name: Check format with black
        run: |
          # Run Black formatter check
          black --diff --check --color --verbose .

  commit-lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Lint commit messages
        uses: wagoid/commitlint-github-action@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          failOnWarnings: 'false'
          commitDepth: 1

  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    concurrency: push
    needs: [test, lint, commit-lint]
    if: github.repository == 'xability/py-maidr'
    environment:
      name: pypi
      url: https://pypi.org/project/maidr/
    permissions:
      # https://docs.github.com/en/rest/overview/permissions-required-for-github-apps?apiVersion=2022-11-28#metadata
      id-token: write
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"  # Using latest stable Python for release

      - name: Install UV
        run: |
          # Install UV for package management
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          # Install build dependencies using UV
          uv pip install python-semantic-release build twine

      - name: Python Semantic Release
        id: release
        uses: python-semantic-release/python-semantic-release@v9.21.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          verbosity: 3
          changelog: true
          commit: true
          push: true

      # see https://docs.pypi.org/trusted-publishers/
      - name: Publish package distributions to PyPI
        id: pypi-publish
        # NOTE: DO NOT wrap the conditional in ${{ }} as it will always evaluate to true.
        # See https://github.com/actions/runner/issues/1173
        if: steps.release.outputs.released == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

      - name: Publish package distributions to GitHub Releases
        id: github-release
        # NOTE: DO NOT wrap the conditional in ${{ }} as it will always evaluate to true.
        # See https://github.com/actions/runner/issues/1173
        if: steps.release.outputs.released == 'true'
        uses: python-semantic-release/upload-to-gh-release@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}
          root_options: "-vv"

      - name: NOOP (skip actual release)
        run: echo "Skipping release for test purposes"
